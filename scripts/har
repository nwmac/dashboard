#!/usr/bin/env node

const fs = require('fs');
const https = require('https');
const path = require('path');
const { createProxyMiddleware } = require('http-proxy-middleware');
const express = require('express');
const request = require('request');

const base = path.resolve(__dirname, '..');
const shell = path.resolve(base, 'shell');

const har = require(`${ shell }/server/har-file`);

console.log(path.resolve(shell, 'server.key'));

const options = {
  key:  fs.readFileSync(path.resolve(shell, 'server', 'server.key')),
  cert: fs.readFileSync(path.resolve(shell, 'server', 'server.crt'))
};

let PORT = process.env.PORT || '8005';

PORT = parseInt(PORT, 10);

if (isNaN(PORT)) {
  console.log('Invalid port'); // eslint-disable-line no-console
  process.exit(1);
}

// Need two arguments

// Read the HAR file

console.log(process.argv);

if (process.argv.length < 4) {
  console.log('Need 2 arguments:');
  console.log('  <har_file> path to HAR file to load');
  console.log('  <version>  dashboard version number to use for static assets (e.g 2.8.0, latest)');
  console.log('');

  process.exit(1);
}

const harFile = process.argv[2];
const version = process.argv[3].trim();
const harData = har.loadFile(harFile, PORT);
const dashboardUrl = `https://releases.rancher.com/dashboard/${ version }/index.html`;

console.log(dashboardUrl);

const dev = (process.env.NODE_ENV !== 'production');
const devPorts = dev || process.env.DEV_PORTS === 'true';

const app = express();

// Catch reload on a dynamic page
// Check that the requestor will accept html and send them the index file
app.use('*', (req, res, next) => {
  const accept = req.headers.accept || '';
  const acceptArray = accept.split(',');
  const html = acceptArray.find((h) => h.trim() === 'text/html');

  if (html) {
    request(dashboardUrl, function (error, response, body) {
      res.type('text/html');
      res.status(response.statusCode);
      res.send(Buffer.from(body));
      res.end();
    });

    return;
  }

  next();
});

app.use('/dashboard', createProxyMiddleware(proxyWsOpts(dashboardUrl)));

// Add in handler for har file requests
app.use(har.harProxy(harData));

const server = https.createServer(options, app);
const appServer = server.listen(PORT);

console.log(`Running Dashboard web server on port ${ PORT }`); // eslint-disable-line no-console


appServer.on('upgrade', (req, socket, head) => {
  const responseHeaders = ['HTTP/1.1 101 Web Socket Protocol Handshake', 'Upgrade: WebSocket', 'Connection: Upgrade'];

  socket.write(`${ responseHeaders.join('\r\n') }\r\n\r\n`);
});

// Just proxy web sockets for v1 and v3 endpoints
// appServer.on('upgrade', (req, socket, head) => {
//   if (req.url.startsWith('/v1')) {
//     return proxies['/v1'].upgrade(req, socket, head);
//   } else if (req.url.startsWith('/v3')) {
//     return proxies['/v3'].upgrade(req, socket, head);
//   } else if (req.url.startsWith('/k8s/')) {
//     return proxies['/k8s'].upgrade(req, socket, head);
//   } else {
//     console.log(`Unknown Web socket upgrade request for ${ req.url }`); // eslint-disable-line no-console
//   }
// });

// ===============================================================================================
// Functions for the request proxying used in dev
// ===============================================================================================

function proxyMetaOpts(target) {
  return {
    target,
    followRedirects: true,
    secure:          !dev,
    ws:              false,
    changeOrigin:    true,
    onProxyReq,
    onProxyReqWs,
    onError,
    onProxyRes,
  };
}

function proxyOpts(target) {
  return {
    target,
    secure:       !devPorts,
    ws:           false,
    changeOrigin: true,
    onProxyReq,
    onProxyReqWs,
    onError,
    onProxyRes,
  };
}

function onProxyRes(proxyRes, req, res) {
  if (devPorts) {
    proxyRes.headers['X-Frame-Options'] = 'ALLOWALL';
  }
}

function proxyWsOpts(target) {
  return {
    ...proxyOpts(target),
    ws:           false,
    changeOrigin: true,
    secure:       false,
  };
}

function onProxyReq(proxyReq, req) {
  if (!(proxyReq._currentRequest && proxyReq._currentRequest._headerSent)) {
    proxyReq.setHeader('x-api-host', req.headers['host']);
    proxyReq.setHeader('x-forwarded-proto', 'https');
    // console.log(proxyReq.getHeaders());
  }
}

function onProxyReqWs(proxyReq, req, socket, options, head) {
  req.headers.origin = options.target.href;
  proxyReq.setHeader('origin', `${ options.target.href }/`);
  proxyReq.setHeader('x-api-host', req.headers['host']);
  proxyReq.setHeader('x-forwarded-proto', 'https');

  socket.on('error', (err) => {
    console.error('Proxy WS Error:', err); // eslint-disable-line no-console
  });
}

function onError(err, req, res) {
  res.statusCode = 598;
  console.error('Proxy Error:', err); // eslint-disable-line no-console
  res.write(JSON.stringify(err));
}
